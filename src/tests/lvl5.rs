use crate::{KeyPair, Lvl5, PrivateKey, PublicKey};

#[test]
fn test_lvl5_sign() {
    let seed = [0; 48];
    let kp = KeyPair::<Lvl5>::new(seed).expect("Could not make a key.");
    let public_key = kp.public_key();
    let private_key = kp.private_key();

    let msg_good = b"Hello";
    let msg_bad = b"Goodbye";

    let sig = private_key
        .sign(msg_good.as_ref())
        .expect("Could not sign message.");
    assert!(sig.verify(msg_good.as_ref(), public_key));
    assert!(!sig.verify(msg_bad.as_slice(), public_key));
}

#[test]
fn test_lvl5_seed_deterministic() {
    let seed = [47; 48];
    let kp = KeyPair::<Lvl5>::new(seed).expect("Could not make a key.");
    let private_key = PrivateKey::<Lvl5> {
        bytes: [
            37, 59, 161, 12, 43, 10, 165, 129, 211, 81, 72, 41, 143, 202, 128, 152, 232, 227, 105,
            239, 129, 202, 197, 215, 36, 0, 159, 8, 89, 65, 105, 150, 57, 62, 169, 43, 204, 124,
            139, 158, 86, 172, 143, 63, 43, 18, 155, 103, 50, 217, 87, 217, 132, 56, 18, 197, 242,
            204, 43, 186, 241, 134, 195, 0, 38, 57, 145, 69, 106, 34, 54, 190, 240, 154, 114, 81,
            23, 56, 127, 143, 38, 238, 91, 62, 228, 232, 213, 148, 239, 2, 50, 37, 65, 219, 13,
            238, 135, 86, 238, 139, 177, 59, 203, 252, 106, 247, 4, 185, 104, 113, 129, 245, 116,
            80, 39, 185, 20, 113, 37, 117, 251, 165, 173, 182, 90, 48, 184, 0, 2, 251, 71, 9, 131,
            137, 203, 122, 52, 41, 248, 161, 34, 171, 51, 147, 90, 136, 225, 98, 82, 66, 232, 172,
            101, 3, 114, 224, 107, 230, 165, 170, 10, 207, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 118, 121, 131, 189, 73, 236,
            68, 224, 168, 73, 79, 64, 245, 253, 10, 176, 16, 93, 46, 143, 193, 249, 123, 21, 160,
            145, 92, 66, 129, 23, 244, 213, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 231, 15, 214, 232, 14, 162, 134, 233, 155, 231, 64, 213, 106, 218, 153,
            137, 155, 33, 52, 240, 233, 8, 35, 228, 217, 129, 81, 238, 233, 207, 65, 87, 252, 252,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 37, 118, 212, 40,
            42, 247, 143, 156, 81, 218, 122, 157, 14, 113, 140, 193, 79, 196, 245, 58, 191, 25, 87,
            133, 16, 239, 54, 171, 207, 254, 145, 51, 227, 89, 102, 253, 190, 23, 245, 124, 32,
            165, 217, 161, 161, 29, 10, 254, 249, 235, 159, 156, 210, 248, 252, 212, 194, 19, 102,
            241, 86, 8, 195, 8, 11, 202, 232, 60, 86, 168, 39, 63, 7, 89, 160, 193, 151, 202, 224,
            173, 132, 73, 239, 202, 29, 150, 82, 67, 168, 155, 5, 20, 38, 146, 223, 64, 206, 41,
            149, 188, 251, 140, 57, 199, 235, 42, 89, 68, 130, 74, 118, 244, 149, 38, 168, 85, 233,
            217, 127, 146, 26, 97, 24, 18, 13, 81, 227, 230, 183, 85, 194, 71, 123, 9, 104, 159,
            65, 200, 32, 37, 64, 46, 194, 73, 177, 230, 162, 17, 229, 175, 177, 215, 213, 78, 78,
            194, 225, 170, 202, 211, 146, 68, 246, 190, 209, 119, 90, 113, 13, 61, 242, 52, 177, 6,
            101, 183, 9, 125, 113, 60, 36, 51, 127, 41, 95, 92, 203, 11, 30, 0, 19, 173, 117, 243,
            8, 250, 199, 174, 36, 242, 242, 126, 141, 109, 105, 219, 192, 127, 88, 114, 102, 89,
            40, 115, 121, 192, 94, 85, 128, 46, 26, 60, 252, 82, 160, 128, 233, 126, 220, 76, 146,
            4, 238, 108, 161, 14, 10, 201, 218, 1, 185, 33, 127, 144, 45, 63, 104, 164, 77, 102, 9,
        ],
    };

    let public_key = PublicKey::<Lvl5> {
        bytes: [
            37, 59, 161, 12, 43, 10, 165, 129, 211, 81, 72, 41, 143, 202, 128, 152, 232, 227, 105,
            239, 129, 202, 197, 215, 36, 0, 159, 8, 89, 65, 105, 150, 57, 62, 169, 43, 204, 124,
            139, 158, 86, 172, 143, 63, 43, 18, 155, 103, 50, 217, 87, 217, 132, 56, 18, 197, 242,
            204, 43, 186, 241, 134, 195, 0, 38, 57, 145, 69, 106, 34, 54, 190, 240, 154, 114, 81,
            23, 56, 127, 143, 38, 238, 91, 62, 228, 232, 213, 148, 239, 2, 50, 37, 65, 219, 13,
            238, 135, 86, 238, 139, 177, 59, 203, 252, 106, 247, 4, 185, 104, 113, 129, 245, 116,
            80, 39, 185, 20, 113, 37, 117, 251, 165, 173, 182, 90, 48, 184, 0, 2,
        ],
    };

    assert_eq!(kp.private_key(), &private_key);
    assert_eq!(kp.public_key(), &public_key);
}
