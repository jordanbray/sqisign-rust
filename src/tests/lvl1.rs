use crate::{KeyPair, Lvl1, PrivateKey, PublicKey};

#[test]
fn test_lvl1_sign() {
    let seed = [0; 48];
    let kp = KeyPair::<Lvl1>::new(seed).expect("Could not make a key.");
    let public_key = kp.public_key();
    let private_key = kp.private_key();

    let msg_good = b"Hello";
    let msg_bad = b"Goodbye";

    let sig = private_key
        .sign(msg_good.as_ref())
        .expect("Could not sign message.");
    assert!(sig.verify(msg_good.as_ref(), public_key));
    assert!(!sig.verify(msg_bad.as_slice(), public_key));
}

#[test]
fn test_lvl1_seed_deterministic() {
    let seed = [47; 48];
    let kp = KeyPair::<Lvl1>::new(seed).expect("Could not make a key.");
    let private_key = PrivateKey::<Lvl1> {
        bytes: [
            54, 159, 243, 155, 251, 14, 213, 15, 248, 8, 129, 192, 181, 175, 128, 175, 96, 135,
            123, 155, 183, 13, 225, 187, 222, 78, 10, 32, 172, 150, 55, 4, 26, 176, 156, 30, 154,
            239, 226, 221, 53, 160, 162, 251, 238, 136, 157, 211, 115, 253, 97, 15, 243, 104, 104,
            184, 53, 117, 161, 87, 220, 64, 125, 0, 29, 223, 101, 113, 4, 152, 58, 83, 204, 48,
            180, 167, 234, 34, 57, 53, 187, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
            208, 161, 158, 247, 82, 47, 36, 173, 8, 132, 212, 217, 59, 56, 57, 163, 254, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 235, 22, 71, 168, 164, 182,
            84, 97, 74, 79, 232, 88, 169, 244, 50, 20, 33, 250, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 184, 220, 190, 176, 83, 116, 179, 113, 51, 144, 67,
            55, 217, 189, 53, 176, 125, 33, 130, 18, 83, 241, 137, 11, 7, 102, 112, 13, 124, 84, 0,
            151, 83, 231, 185, 64, 253, 21, 163, 0, 254, 10, 50, 81, 207, 48, 247, 140, 46, 49,
            154, 145, 217, 209, 122, 39, 42, 184, 123, 226, 211, 13, 0, 211, 27, 73, 235, 192, 120,
            81, 90, 166, 24, 240, 152, 49, 181, 199, 67, 38, 59, 108, 169, 195, 219, 252, 82, 1,
            65, 141, 195, 241, 85, 129, 0, 131, 220, 171, 73, 153, 236, 152, 49, 79, 23, 234, 48,
            213, 206, 70, 188, 232, 147, 51, 138, 172, 103, 64, 181, 234, 198, 231, 246, 51, 210,
            176, 0,
        ],
    };

    let public_key = PublicKey::<Lvl1> {
        bytes: [
            54, 159, 243, 155, 251, 14, 213, 15, 248, 8, 129, 192, 181, 175, 128, 175, 96, 135,
            123, 155, 183, 13, 225, 187, 222, 78, 10, 32, 172, 150, 55, 4, 26, 176, 156, 30, 154,
            239, 226, 221, 53, 160, 162, 251, 238, 136, 157, 211, 115, 253, 97, 15, 243, 104, 104,
            184, 53, 117, 161, 87, 220, 64, 125, 0, 29,
        ],
    };

    assert_eq!(kp.private_key(), &private_key);
    assert_eq!(kp.public_key(), &public_key);
}
