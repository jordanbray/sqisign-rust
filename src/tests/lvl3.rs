use crate::{KeyPair, Lvl3, PrivateKey, PublicKey};

#[test]
fn test_lvl3_sign() {
    let seed = [0; 48];
    let kp = KeyPair::<Lvl3>::new(seed).expect("Could not make a key.");
    let public_key = kp.public_key();
    let private_key = kp.private_key();

    let msg_good = b"Hello";
    let msg_bad = b"Goodbye";

    let sig = private_key
        .sign(msg_good.as_ref())
        .expect("Could not sign message.");
    assert!(sig.verify(msg_good.as_ref(), public_key));
    assert!(!sig.verify(msg_bad.as_slice(), public_key));
}

#[test]
fn test_lvl3_seed_deterministic() {
    let seed = [47; 48];
    let kp = KeyPair::<Lvl3>::new(seed).expect("Could not make a key.");
    let private_key = PrivateKey::<Lvl3>::from_bytes([
        168, 121, 48, 97, 245, 237, 102, 220, 174, 2, 89, 185, 182, 194, 83, 172, 81, 227, 34, 194,
        156, 156, 143, 187, 182, 42, 60, 32, 196, 71, 57, 41, 65, 87, 149, 51, 83, 206, 205, 72,
        172, 197, 203, 28, 211, 124, 119, 64, 157, 170, 4, 247, 175, 78, 190, 237, 69, 133, 196,
        234, 116, 60, 184, 247, 111, 114, 147, 103, 126, 253, 154, 95, 119, 172, 169, 62, 170, 143,
        151, 153, 139, 146, 183, 152, 70, 55, 114, 104, 58, 199, 69, 214, 13, 239, 46, 25, 23, 245,
        60, 200, 12, 240, 236, 49, 158, 201, 110, 152, 150, 202, 105, 96, 199, 142, 220, 184, 220,
        228, 72, 196, 67, 88, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        196, 188, 140, 121, 5, 181, 161, 30, 169, 79, 174, 124, 152, 96, 151, 107, 197, 137, 78,
        237, 80, 90, 240, 20, 220, 243, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 205, 207, 112, 103, 92, 117, 145, 153,
        203, 99, 20, 189, 226, 45, 69, 154, 112, 20, 47, 254, 72, 54, 174, 211, 202, 246, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 245, 0, 182, 132, 104, 19, 28, 196, 238, 79, 69, 215,
        3, 136, 23, 110, 172, 41, 65, 214, 66, 238, 211, 223, 3, 210, 146, 58, 218, 27, 18, 9, 67,
        83, 195, 26, 147, 67, 177, 29, 84, 148, 144, 68, 114, 233, 0, 0, 14, 36, 224, 100, 152,
        250, 25, 33, 7, 244, 101, 247, 117, 231, 49, 241, 158, 154, 39, 226, 177, 238, 91, 210, 69,
        88, 30, 8, 190, 183, 120, 196, 137, 187, 51, 203, 253, 178, 126, 147, 254, 234, 217, 200,
        160, 10, 0, 224, 56, 159, 243, 5, 64, 198, 81, 165, 233, 2, 180, 55, 77, 106, 190, 117,
        213, 89, 199, 59, 233, 38, 132, 49, 192, 238, 10, 178, 156, 8, 112, 190, 13, 51, 31, 36, 4,
        36, 21, 5, 23, 232, 102, 211, 195, 216, 0, 179, 77, 203, 167, 191, 74, 253, 107, 197, 76,
        88, 173, 100, 163, 150, 102, 220, 199, 183, 195, 105, 196, 139, 39, 162, 114, 225, 163, 93,
        84, 83, 1, 171, 58, 94, 216, 143, 138, 179, 226, 86, 1, 189, 111, 59, 212, 75, 0,
    ]);

    let public_key = PublicKey::<Lvl3>::from_bytes([
        168, 121, 48, 97, 245, 237, 102, 220, 174, 2, 89, 185, 182, 194, 83, 172, 81, 227, 34, 194,
        156, 156, 143, 187, 182, 42, 60, 32, 196, 71, 57, 41, 65, 87, 149, 51, 83, 206, 205, 72,
        172, 197, 203, 28, 211, 124, 119, 64, 157, 170, 4, 247, 175, 78, 190, 237, 69, 133, 196,
        234, 116, 60, 184, 247, 111, 114, 147, 103, 126, 253, 154, 95, 119, 172, 169, 62, 170, 143,
        151, 153, 139, 146, 183, 152, 70, 55, 114, 104, 58, 199, 69, 214, 13, 239, 46, 25, 23,
    ]);

    assert_eq!(kp.private_key(), &private_key);
    assert_eq!(kp.public_key(), &public_key);
}
